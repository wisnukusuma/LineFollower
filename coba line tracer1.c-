/*****************************************************
This program was produced by the
CodeWizardAVR V2.05.3 Standard
Automatic Program Generator
© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 16/06/2016
Author  : FUDOMAS
Company : 
Comments: 


Chip type               : ATmega16
Program type            : Application
AVR Core Clock frequency: 11,059200 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 256
*****************************************************/

#include <mega16.h>
#include <stdio.h>
#include <stdlib.h>
#include <delay.h>
#define maju_kanan   PORTD.7
#define maju_kiri    PORTD.3
#define mundur_kanan PORTD.6
#define mundur_kiri  PORTD.2
#define kec_kiri     OCR1B  
#define kec_kanan    OCR1A
char sensor[16];
int posisi;
 
unsigned char sen[10], garis;
int i;
int adc[10],logic[10];
int limit_adc=30;

// Alphanumeric LCD functions
#include <alcd.h>

#define ADC_VREF_TYPE 0x20

// Read the 8 most significant bits
// of the AD conversion result
unsigned char read_adc(unsigned char adc_input)
{
ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
// Delay needed for the stabilization of the ADC input voltage
delay_us(10);
// Start the AD conversion
ADCSRA|=0x40;
// Wait for the AD conversion to complete
while ((ADCSRA & 0x10)==0);
ADCSRA|=0x10;
return ADCH;
}

void maju()
{
    maju_kanan=1;
    mundur_kanan=0;
    maju_kiri=1;
    mundur_kiri=0;    
}

void belok_kanan()
{
    maju_kanan=0;
    mundur_kanan=1;
    maju_kiri=1;
    mundur_kiri=0;    
}

void belok_kiri()
{
    maju_kanan=1;
    mundur_kanan=0;
    maju_kiri=0;
    mundur_kiri=1;    
}
void baca_adc()
{
 for(i=0;i<=7;i++)
 {
   adc[i]=read_adc(i); 
   if(adc[i]>limit_adc)
    {
      logic[i]=1;
      sen[i]=1; // high
    }  
    else
    {
    logic[i]=0;
    sen[i]=0; //low
    }
    
 }
 
}



void bacasensor()
         {        
           
    
          
          lcd_gotoxy(4,0); 
          sprintf(sensor,"%d%d%d%d%d%d%d%d",logic[0],logic[1],logic[2],logic[3],logic[4],logic[5],logic[6],logic[7]);                            
          lcd_puts(sensor);
          lcd_gotoxy(3,1);
          lcd_puts("FUDO & ARIF");
                 
          delay_ms(10);
                    
          
          // untuk mengubah menjadi logic high atau low tinggal
          // kita buat limitnya      
      
          }
 
void logika()
{                       
        garis=(sen[7]*128)+(sen[6]*64)+(sen[5]*32)+(sen[4]*16)+(sen[3]*8)+(sen[2]*4)+(sen[1]*2)+(sen[0]*1);
}  



  
      
    
   




// Declare your global variables here

void main(void)
{
// Declare your local variables here

// Input/Output Ports initialization
// Port A initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTA=0x00;
DDRA=0x00;

// Port B initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTB=0x00;
DDRB=0x00;

// Port C initialization
// Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In 
// State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T 
PORTC=0x00;
DDRC=0x00;

// Port D initialization
// Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out 
// State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0 
PORTD=0x00;
DDRD=0xFF;

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=0xFF
// OC0 output: Disconnected
TCCR0=0x00;
TCNT0=0x00;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: 10,800 kHz
// Mode: Fast PWM top=0x00FF
// OC1A output: Non-Inv.
// OC1B output: Non-Inv.
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=0xA1;
TCCR1B=0x0D;
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0x00;
TCCR2=0x00;
TCNT2=0x00;
OCR2=0x00;

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
MCUCR=0x00;
MCUCSR=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=0x00;

// USART initialization
// USART disabled
UCSRB=0x00;

// Analog Comparator initialization
// Analog Comparator: Off
// Analog Comparator Input Capture by Timer/Counter 1: Off
ACSR=0x80;
SFIOR=0x00;

// ADC initialization
// ADC Clock frequency: 691,200 kHz
// ADC Voltage Reference: AREF pin
// ADC Auto Trigger Source: ADC Stopped
// Only the 8 most significant bits of
// the AD conversion result are used
ADMUX=ADC_VREF_TYPE & 0xff;
ADCSRA=0x84;

// SPI initialization
// SPI disabled
SPCR=0x00;

// TWI initialization
// TWI disabled
TWCR=0x00;

// Alphanumeric LCD initialization
// Connections are specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTB Bit 0
// RD - PORTB Bit 1
// EN - PORTB Bit 2
// D4 - PORTB Bit 4
// D5 - PORTB Bit 5
// D6 - PORTB Bit 6
// D7 - PORTB Bit 7
// Characters/line: 16
lcd_init(16);


          
      
          
while (1)
      {        
            
            logika();
            baca_adc();
            bacasensor();
            
            switch(garis)      
            { 
            case 0b01111111:
            posisi =9;
            break; 
               
            case 0b00111111:
            posisi=9;
            break;    
            
            case 0b00011111:
            posisi=9;
            break;
            
            case 0b00001111:
            posisi=9;
            break;
            
            case 0b00000111:
            posisi=9;
            break;
                            
            case 0b00000001:
            posisi=7;
            break;
            
            case 0b00000011:
            posisi=6;
            break;  
            
            case 0b00000010:
            posisi=5;
            break;
            
            case 0b00000110:
            posisi=4;
            break;  
            
            case 0b00000100:
            posisi=3;
            break;
            
            case 0b00001100:
            posisi=2;
            break;  
            
            case 0b00001000:
            posisi=1;
            break;  
            
            case 0b00011000:
            posisi=0;
            break;  //kondisi tengah
            
            case 0b00010000:
            posisi=-1;
            break;
            
            case 0b00110000:
            posisi=-2;
            break;   
            
            case 0b00100000:
            posisi=-3;
            break;
            
            case 0b01100000:
            posisi=-4;
            break;   
            
            case 0b01000000:
            posisi=-5;
            break;
            
            case 0b11000000:
            posisi=-6;
            break;
            
            case 0b10000000:
            posisi=-7;
            break;
            
            case 0b11100000:
            posisi=-9;
            break;
            
            case 0b11110000:
            posisi=-9;
            break;
            
            case 0b11111000:
            posisi=-9;
            break;
            
            case 0b11111100:
            posisi=-9;
            break;
            
            case 0b11111110:
            posisi=-9;
            break;
            
            case 0b00000000: 
            if(posisi<0)
            posisi=-9;
            else if(posisi>0)
            posisi=9;
            break;
            
            case 0b11111111:
            posisi=10;
            break;
            
            }  
            
            switch(posisi)
           switch(posisi)
            {
            case -9:
            belok_kanan();
            kec_kiri=40;
            kec_kanan=40;
            break;
            
            case -7 :
            belok_kanan();
            kec_kiri=200;
            kec_kanan=10;
            break; 
            
            case -6 :
            maju();
            kec_kiri=175;
            kec_kanan=10;
            break;
            
            case -5 :
            maju();
            kec_kiri=255;
            kec_kanan=30;
            break;
            
            case -4 :
            maju();
            kec_kiri=255;
            kec_kanan=75;
            break;
            
            case -3 :
            maju();
            kec_kiri=255;
            kec_kanan=100;
            break;
            
            case -2 :
            maju();
            kec_kiri=255;
            kec_kanan=170;
            break;
            
            case -1 :
            maju();
            kec_kiri=255;
            kec_kanan=230;
            break;  
            
            case 0 :
            maju();
            kec_kiri=255;
            kec_kanan=255;
            break; 
            
            case 1 :
            maju();
            kec_kiri=230;
            kec_kanan=255;
            break;
            
            case 2 :
            maju();
            kec_kiri=170;
            kec_kanan=255;
            break;
            
            case 3 :
            maju();
            kec_kiri=100;
            kec_kanan=255;
            break;
            
            case 4 :
            maju();
            kec_kiri=75;
            kec_kanan=255;
            break; 
            
            case 5 :
            maju();
            kec_kiri=30;
            kec_kanan=255;
            break;
            
            case 6 :
            maju();
            kec_kiri=10;
            kec_kanan=175;
            break;
            
            case 7 :
            belok_kiri();
            kec_kiri=10;
            kec_kanan=200;
            break; 
            
            case 9 :
            belok_kiri();
            kec_kiri=40;
            kec_kanan=40;
            break;
            
            case 10:
            maju();
            kec_kiri=0;
            kec_kanan=0;
            break;  
            
            lcd_clear();  
            
           
      }
}  
   }